#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: zabbix_group
short_description: Add or remove Zabbix hostgroups
description:
   - Add or remove hostgroups from a remote host.
version_added: "0.1.0"
options:
  name:
    description:
      - name of the hostgroup to add or remove
    required: true
    default: null
  login_user:
    description:
      - The username used to authenticate with zabbix server
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with zabbix server
    required: false
    default: null
  login_url:
    description:
      - URL running the zabbix server
    required: true
    default: null
  state:
    description:
      - The hostgroup state
    required: false
    default: present
    choices: [ "present", "absent" ]
author: Adham Helal
'''

EXAMPLES = '''
# Create a new hostgroup with name "production"
- zabbix_groups: 
     name=production,development
     login_url=https://zabbix.example.com/zabbix
     login_user=Admin
     login_password=pass

# Delete a hostgroup with name "development
- zabbix_groups: 
     name=development
     login_url=https://zabbix.example.com/zabbix
     login_user=Admin
     login_password=pass
     state=absent
'''

class ZabbixGroup():
    def __init__(self, module):
        self.module = module
        self.login_url = self.module.params["login_url"]
        self.hostgroup = self.module.params["hostgroup"]
        self.state = self.module.params["state"]
        self.changed = False
        self.login_user = module.params["login_user"]
        self.login_password = module.params["login_password"]
        self.zapi = False

    def hostgroup_exists(self):
        return self.zapi.hostgroup.exists(name=self.hostgroup)

    def hostgroup_create(self):
        try:
            if not self.hostgroup_exists():
                self.zapi.hostgroup.create(name=self.hostgroup)
                return True
            else:
                return False
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to create hostgroup: %s" % e)

    def hostgroup_delete(self):
        try:
            groupid = self.hostgroup_get_id()
            if groupid:
                self.zapi.hostgroup.delete(groupid)
                return True
            else:
                return False
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to delete hostgroup: %s" % e)
        
    def hostgroup_get_id(self):
        if self.hostgroup_exists():
            try:
                hostgroup_object = self.zapi.hostgroup.getobjects(name=self.hostgroup)
            except ZabbixAPIException as e:
                self.module.fail_json(msg="unable to get hostgroup object: %s" % e)
            try:
                return hostgroup_object[0]["groupid"]
            except IndexError:
                return False
        else:
            return False

    def main(self):
        self.zapi = ZabbixAPI(self.login_url)
        try:
            self.zapi.login(self.login_user, self.login_password)
        except ConnectionError as e:
            self.module.fail_json(msg="unable to connect to zabbix server: %s" % e)

        if self.state == "absent":
            self.changed = self.hostgroup_delete()
        elif self.state == "present":
            self.changed = self.hostgroup_create()

        self.module.exit_json(changed=self.changed)

def main():
        module = AnsibleModule(
            argument_spec=dict(
                login_user=dict(default="Admin"),
                login_password=dict(default=""),
                login_url=dict(default=""),
                hostgroup=dict(required=True, aliases=['name']),
                state=dict(default="present", choices=["absent", "present"]),
            ),
            #For now dont support check_mode
            supports_check_mode = False
        )
        if my_import:
            module.fail_json(msg=my_import)

        ZabbixGroup(module).main()

from ansible.module_utils.basic import *
import json
my_import = []
try:
    from pyzabbix import ZabbixAPI
    from pyzabbix import ZabbixAPIException
except ImportError, e:
    my_import.append(e)

try:
    from requests import ConnectionError
except ImportError, e:
    my_import.append(e)

main()