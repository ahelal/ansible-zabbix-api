#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: zabbix_group
short_description: Add or remove Zabbix  hostgroups
description:
   - Add or remove hostgroups from a remote host.
version_added: "0.0.1"
options:
  name:
    description:
      - name of the hostgroup to add or remove
    required: true
    default: null
  login_user:
    description:
      - The username used to authenticate with zabbix server
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with zabbix server
    required: false
    default: null
  login_url:
    description:
      - URL running the zabbix server
    required: true
    default: null
  state:
    description:
      - The hostgroup state
    required: false
    default: present
    choices: [ "present", "absent" ]
author: Adham Helal
'''

EXAMPLES = '''
# Create a new hostgroup with name "production"
- zabbix_groups: name=production,development
                 login_url=https://zabbix.example.com/zabbix
                 login_user=Admin
                 login_password=pass

# Delete a hostgroup with name "development
- zabbix_groups: name=development
                 login_url=https://zabbix.example.com/zabbix
                 login_user=Admin
                 login_password=pass
                 state=absent
'''


# ===========================================
# Zabbix_api module specific support methods.
#

#
# TODO: Clean code
#
#

class zabbiHostGroups():
    def __init__(self, module):
        self.module = module
        self.login_url = self.module.params["login_url"]
        self.hostgroup = self.module.params["hostgroup"]
        self.state = self.module.params["state"]
        self.changed = False

        #Direct connection
        self.login_user=module.params["login_user"]
        self.login_password=module.params["login_password"]


    ## Check if hostgroup exists (returns true exists and false does not)
    def hostgroupExists(self):
        return self.zapi.hostgroup.exists(name=self.hostgroup)

    ##Create hostgroup
    def hostgroupCreate(self):
        try:
            if not self.hostgroupExists():
                self.zapi.hostgroup.create(name=self.hostgroup)
                return True
            else:
                return False
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to create hostgroup: %s" % e)

    ##Delete hostgroup
    def hostgroupDelete(self):
        try:
            groupid=self.hostgroupGetobjects("groupid") 
            if groupid:
                self.zapi.hostgroup.delete(groupid)
                return True

        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to delete hostgroup: %s" % e)
        
        return False
        
    ##Get hostgroup objects
    def hostgroupId(self,returnkey="all"):
        try:
            hostgroupObject = self.zapi.hostgroup.getobjects(name=self.hostgroup)
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to get hostgroup object: %s" % e)
        if returnkey == "all":
            return hostgroupObject
        else:
            try:
                return hostgroupObject[0][returnkey]
            except IndexError:
                return False
        return True


    def main(self):

        self.zapi = ZabbixAPI(self.login_url)
        try:
            self.zapi.login(self.login_user, self.login_password)
        except ConnectionError as e:
            self.module.fail_json(msg="unable to connect to zabbix server: %s" % e)


        if self.state == "absent":
            self.changed = self.hostgroupDelete()

        elif self.state == "present":
            self.changed = self.hostgroupCreate()

        self.module.exit_json(changed=self.changed)


try:
    from pyzabbix import ZabbixAPI
    from requests import ConnectionError
    from pyzabbix import ZabbixAPIException
except ImportError:
    pyzabbix_found = False
else:
    pyzabbix_found = True


def main():
        module = AnsibleModule(
            argument_spec=dict(
                login_user=dict(default="Admin"),
                login_password=dict(default=""),
                login_url=dict(default=""),
                hostgroup=dict(required=True, aliases=['name']),
                state=dict(default="present", choices=["absent", "present"]),
            ),
            #For now dont support check_mode
            supports_check_mode = False
        )


        if not pyzabbix_found:
            module.fail_json(msg="the python pyzabbix module is required")

        zabbiHostGroups(module).main()

# import module snippets
from ansible.module_utils.basic import *
main()