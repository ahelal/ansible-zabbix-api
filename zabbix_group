#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: zabbix_group
short_description: Add or remove Zabbix hostgroups
description:
   - Add or remove hostgroups from a remote host.
version_added: "0.1.0"
options:
  name:
    description:
      - name of the hostgroup to add or remove
    required: true
    default: null
  login_user:
    description:
      - The username used to authenticate with zabbix server
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with zabbix server
    required: false
    default: null
  login_url:
    description:
      - URL running the zabbix server
    required: true
    default: null
  state:
    description:
      - The hostgroup state
    required: false
    default: present
    choices: [ "present", "absent" ]
author: Adham Helal
'''

EXAMPLES = '''
# Create a new hostgroup with name "production"
- zabbix_groups: 
     name=production,development
     login_url=https://zabbix.example.com/zabbix
     login_user=Admin
     login_password=pass

# Delete a hostgroup with name "development
- zabbix_groups: 
     name=development
     login_url=https://zabbix.example.com/zabbix
     login_user=Admin
     login_password=pass
     state=absent
'''
#
# pyzabbix https://github.com/lukecyca/pyzabbix
#  Original Ruby Library is Copyright (C) 2009 Andrew Nelson nelsonab(at)red-tux(dot)net
#  Original Python Library is Copyright (C) 2009 Brett Lentz brett.lentz(at)gmail(dot)com
#
import logging
import requests
import json
from requests import ConnectionError

class _NullHandler(logging.Handler):
    def emit(self, record):
        pass

logger = logging.getLogger(__name__)
logger.addHandler(_NullHandler())

class ZabbixAPIException(Exception):
    """ generic zabbix api exception
    code list:
         -32602 - Invalid params (eg already exists)
         -32500 - no permissions
    """
    pass

class ZabbixAPI(object):
    def __init__(self,
                 server='http://localhost/zabbix',
                 session=None,
                 use_authenticate=False):
        """
        Parameters:
            server: Base URI for zabbix web interface (omitting /api_jsonrpc.php)
            session: optional pre-configured requests.Session instance
            use_authenticate: Use old (Zabbix 1.8) style authentication
        """

        if session:
            self.session = session
        else:
            self.session = requests.Session()

        # Default headers for all requests
        self.session.headers.update({
            'Content-Type': 'application/json-rpc',
            'User-Agent': 'python/pyzabbix'
        })

        self.use_authenticate = use_authenticate
        self.auth = ''
        self.id = 0

        self.url = server + '/api_jsonrpc.php'
        logger.info("JSON-RPC Server Endpoint: %s", self.url)

    def login(self, user='', password=''):
        """Convenience method for calling user.authenticate and storing the resulting auth token
           for further commands.
           If use_authenticate is set, it uses the older (Zabbix 1.8) authentication command"""

        # If we have an invalid auth token, we are not allowed to send a login
        # request. Clear it before trying.
        self.auth = ''
        if self.use_authenticate:
            self.auth = self.user.authenticate(user=user, password=password)
        else:
            self.auth = self.user.login(user=user, password=password)

    def confimport(self, format='', source='', rules=''):
        """Alias for configuration.import because it clashes with
           Python's import reserved keyword"""

        return self.do_request(
            method="configuration.import",
            params={"format": format, "source": source, "rules": rules}
        )['result']

    def api_version(self):
        return self.apiinfo.version()

    def do_request(self, method, params=None):
        request_json = {
            'jsonrpc': '2.0',
            'method': method,
            'params': params or {},
            'auth': self.auth,
            'id': self.id,
        }

        logger.debug("Sending: %s", str(request_json))
        response = self.session.post(
            self.url,
            data=json.dumps(request_json),
        )
        logger.debug("Response Code: %s", str(response.status_code))

        # NOTE: Getting a 412 response code means the headers are not in the
        # list of allowed headers.
        response.raise_for_status()

        if not len(response.text):
            raise ZabbixAPIException("Received empty response")

        try:
            response_json = json.loads(response.text)
        except ValueError:
            raise ZabbixAPIException(
                "Unable to parse json: %s" % response.text
            )
        logger.debug("Response Body: %s", json.dumps(response_json,
                                                     indent=4,
                                                     separators=(',', ': ')))

        self.id += 1

        if 'error' in response_json:  # some exception
            msg = "Error {code}: {message}, {data} while sending {json}".format(
                code=response_json['error']['code'],
                message=response_json['error']['message'],
                data=response_json['error']['data'],
                json=str(request_json)
            )
            raise ZabbixAPIException(msg, response_json['error']['code'])

        return response_json

    def __getattr__(self, attr):
        """Dynamically create an object class (ie: host)"""
        return ZabbixAPIObjectClass(attr, self)

class ZabbixAPIObjectClass(object):
    def __init__(self, name, parent):
        self.name = name
        self.parent = parent

    def __getattr__(self, attr):
        """Dynamically create a method (ie: get)"""

        def fn(*args, **kwargs):
            if args and kwargs:
                raise TypeError("Found both args and kwargs")

            return self.parent.do_request(
                '{0}.{1}'.format(self.name, attr),
                args or kwargs
            )['result']

        return fn
# ------------------------------------------------------
# End of pyzabbix


class ZabbixGroup():
    def __init__(self, module):
        self.module = module
        self.login_url = self.module.params["login_url"]
        self.hostgroup = self.module.params["hostgroup"]
        self.state = self.module.params["state"]
        self.changed = False
        self.login_user = module.params["login_user"]
        self.login_password = module.params["login_password"]
        self.zapi = False

    def hostgroup_exists(self):
        return self.zapi.hostgroup.exists(name=self.hostgroup)

    def hostgroup_create(self):
        try:
            if not self.hostgroup_exists():
                self.zapi.hostgroup.create(name=self.hostgroup)
                return True
            else:
                return False
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to create hostgroup: %s" % e)

    def hostgroup_delete(self):
        try:
            groupid = self.hostgroup_get_id()
            if groupid:
                self.zapi.hostgroup.delete(groupid)
                return True
            else:
                return False
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to delete hostgroup: %s" % e)
        
    def hostgroup_get_id(self):
        if self.hostgroup_exists():
            try:
                hostgroup_object = self.zapi.hostgroup.getobjects(name=self.hostgroup)
            except ZabbixAPIException as e:
                self.module.fail_json(msg="unable to get hostgroup object: %s" % e)
            try:
                return hostgroup_object[0]["groupid"]
            except IndexError:
                return False
        else:
            return False

    def main(self):
        self.zapi = ZabbixAPI(self.login_url)
        try:
            self.zapi.login(self.login_user, self.login_password)
        except ConnectionError as e:
            self.module.fail_json(msg="unable to connect to zabbix server: %s" % e)

        if self.state == "absent":
            self.changed = self.hostgroup_delete()
        elif self.state == "present":
            self.changed = self.hostgroup_create()

        self.module.exit_json(changed=self.changed)

def main():
        module = AnsibleModule(
            argument_spec=dict(
                login_user=dict(default="Admin"),
                login_password=dict(default=""),
                login_url=dict(default=""),
                hostgroup=dict(required=True, aliases=['name']),
                state=dict(default="present", choices=["absent", "present"]),
            ),
            #For now dont support check_mode
            supports_check_mode = False
        )

        ZabbixGroup(module).main()

from ansible.module_utils.basic import *
main()