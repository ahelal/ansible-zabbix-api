#!/usr/bin/python
# -*- coding: utf-8 -*-


DOCUMENTATION = '''
---
module: zabbix_hosts
short_description: Add or remove Zabbix hosts
description:
   - Add or remove zabbix hosts
version_added: "0.1.0"
options:
  name:
    description:
    name:
      - name of the host to add or remove
    required: true
    default: null
  visible:
      - The visible name of the host
    required: false
    default: null
  login_user:
    description:
      - The username used to authenticate with zabbix server
    required: false
    default: null
  login_password:
    description:
      - The password used to authenticate with zabbix server
    required: false
    default: null
  login_url:
    description:
      - URL running the zabbix server
    required: true
    default: null
  state:
    description:
      - The host state
    required: false
    default: present
    choices: [ "present", "absent" ]
  groups:
      - name of the group(s) name separated ,
    required: false
    default: null
  templates:
      - name of the template(s) name separated ,
    required: false
    default: null
  dns:
      - Interface DNS
    required: false
    default: null
  ip:
      - Interface IP
    required: false
    default: null
  port:
      - Interface port
    required: false
    default: 10050
  type:
      - Interface type options are 'agent', 'SNMP', 'IPMI', 'JMX'
    required: false
    default: agent
  status:
     - Should the host be "monitored" or "unmonitored"
    default: monitored
    required: false
author: Adham Helal
'''

EXAMPLES = '''
# Create a new host with name "host1" part of group1 and group2
# The visible name is "TheHost1" the host is reachable vie dns "host1.example.com"
# on port 1050 and apply Template OS Linux and anotherTemplate
- zabbix_host : 
     name=host1
     login_url=https://zabbix.example.com/zabbix
     login_user=Admin
     login_password=pass
     groups="group1,group2"
     visible="TheHost1"
     status=yes
     dns="host1.example.com"
     port="10050"
     templates="Template OS Linux,anotherTemplate"                 
# Delete a hostgroup with name "host1"
- zabbix_host : 
    name=host1
    login_url=https://zabbix.example.com/zabbix
    login_user=Admin
    login_password=pass
    state=absent
'''
#
# pyzabbix https://github.com/lukecyca/pyzabbix
#  Original Ruby Library is Copyright (C) 2009 Andrew Nelson nelsonab(at)red-tux(dot)net
#  Original Python Library is Copyright (C) 2009 Brett Lentz brett.lentz(at)gmail(dot)com
#
import logging
import requests
import json
from ansible.module_utils.basic import *

class _NullHandler(logging.Handler):
    def emit(self, record):
        pass

logger = logging.getLogger(__name__)
logger.addHandler(_NullHandler())

class ZabbixAPIException(Exception):
    """ generic zabbix api exception
    code list:
         -32602 - Invalid params (eg already exists)
         -32500 - no permissions
    """
    pass

class ZabbixAPI(object):
    def __init__(self,
                 server='http://localhost/zabbix',
                 session=None,
                 use_authenticate=False):
        """
        Parameters:
            server: Base URI for zabbix web interface (omitting /api_jsonrpc.php)
            session: optional pre-configured requests.Session instance
            use_authenticate: Use old (Zabbix 1.8) style authentication
        """

        if session:
            self.session = session
        else:
            self.session = requests.Session()

        # Default headers for all requests
        self.session.headers.update({
            'Content-Type': 'application/json-rpc',
            'User-Agent': 'python/pyzabbix'
        })

        self.use_authenticate = use_authenticate
        self.auth = ''
        self.id = 0

        self.url = server + '/api_jsonrpc.php'
        logger.info("JSON-RPC Server Endpoint: %s", self.url)

    def login(self, user='', password=''):
        """Convenience method for calling user.authenticate and storing the resulting auth token
           for further commands.
           If use_authenticate is set, it uses the older (Zabbix 1.8) authentication command"""

        # If we have an invalid auth token, we are not allowed to send a login
        # request. Clear it before trying.
        self.auth = ''
        if self.use_authenticate:
            self.auth = self.user.authenticate(user=user, password=password)
        else:
            self.auth = self.user.login(user=user, password=password)

    def confimport(self, format='', source='', rules=''):
        """Alias for configuration.import because it clashes with
           Python's import reserved keyword"""

        return self.do_request(
            method="configuration.import",
            params={"format": format, "source": source, "rules": rules}
        )['result']

    def api_version(self):
        return self.apiinfo.version()

    def do_request(self, method, params=None):
        request_json = {
            'jsonrpc': '2.0',
            'method': method,
            'params': params or {},
            'auth': self.auth,
            'id': self.id,
        }

        logger.debug("Sending: %s", str(request_json))
        response = self.session.post(
            self.url,
            data=json.dumps(request_json),
        )
        logger.debug("Response Code: %s", str(response.status_code))

        # NOTE: Getting a 412 response code means the headers are not in the
        # list of allowed headers.
        response.raise_for_status()

        if not len(response.text):
            raise ZabbixAPIException("Received empty response")

        try:
            response_json = json.loads(response.text)
        except ValueError:
            raise ZabbixAPIException(
                "Unable to parse json: %s" % response.text
            )
        logger.debug("Response Body: %s", json.dumps(response_json,
                                                     indent=4,
                                                     separators=(',', ': ')))

        self.id += 1

        if 'error' in response_json:  # some exception
            msg = "Error {code}: {message}, {data} while sending {json}".format(
                code=response_json['error']['code'],
                message=response_json['error']['message'],
                data=response_json['error']['data'],
                json=str(request_json)
            )
            raise ZabbixAPIException(msg, response_json['error']['code'])

        return response_json

    def __getattr__(self, attr):
        """Dynamically create an object class (ie: host)"""
        return ZabbixAPIObjectClass(attr, self)

class ZabbixAPIObjectClass(object):
    def __init__(self, name, parent):
        self.name = name
        self.parent = parent

    def __getattr__(self, attr):
        """Dynamically create a method (ie: get)"""

        def fn(*args, **kwargs):
            if args and kwargs:
                raise TypeError("Found both args and kwargs")

            return self.parent.do_request(
                '{0}.{1}'.format(self.name, attr),
                args or kwargs
            )['result']

        return fn
# ------------------------------------------------------
# End of pyzabbix

class HostTemplate():
    def __init__(self, host_id="", visible="",  groups="", templates="", interface="", status=0):
        self.host_id   = host_id
        self.groups = groups
        self.templates = templates
        self.interface = interface
        self.visible = visible
        self.status = status

    def __eq__(self, other):
        condition  = sorted(self.templates) == sorted(other.templates)
        condition &= str(self.visible) == str(other.visible)
        condition &= sorted(self.groups) == sorted(other.groups)
        condition &= str(self.status) == str(other.status)
        for element in ["ip", "dns", "useip", "type", "port"]:
            condition &= str(self.interface[0][element]) == str(other.interface[0][element])
        return condition

class ZabbixHosts():
    def __init__(self, module):
        agent_types = {"agent": 1, "SNMP": 2, "IPMI":  3, "JMX": 4}
        status_type = {"monitored": 0, "unmonitored": 1, "yes": 0, "no": 1}
        self.module      = module
        self.login_url   = self.module.params["login_url"]
        self.host        = self.module.params["host"]
        self.visible     = self.module.params["visible"]
        self.state       = self.module.params["state"]
        self.groups      = self.module.params["groups"]
        self.templates   = self.module.params["templates"]
        self.login_reset = self.module.params["login_reset"]
        self.status      = status_type[self.module.params["status"]]
        self.i_dns       = self.module.params["i_dns"]
        self.i_ip        = self.module.params["i_ip"]
        self.i_port      = self.module.params["i_port"]
        self.i_main      = self.module.params["i_main"]
        self.i_type      = agent_types[self.module.params["i_type"]]
        self.changed     = False

        self.login_user = module.params["login_user"]
        self.login_password = module.params["login_password"]
        self.zapi = ZabbixAPI(self.login_url)

    #def get_template_id(self,templates):

    def get_host_object(self):
        self.current_host = HostTemplate()
        self.current_host.groups = []
        self.current_host.templates = []
        try:
            for group in self.zapi.host.get(selectGroups="extended", filter={"hostid":self.host_id})[0]["groups"]:
                self.current_host.groups.append({'groupid': group["groupid"]})

            for template in self.zapi.host.get(selectParentTemplates="extended", filter={"hostid":self.host_id})[0]["parentTemplates"]:
                self.current_host.templates.append({'templateid': template["templateid"]})

            self.current_host.interface = self.zapi.hostinterface.get(output="extend", hostids=self.host_id)
            current_host_object = self.zapi.host.getobjects(host=self.host)
            self.current_host.visible = current_host_object[0]["name"]
            self.current_host.status  = current_host_object[0]["status"]
        except ZabbixAPIException as e:
                self.module.fail_json(msg="unable to get host object: %s" % e)
        return True

    def get_host_id(self):
        if self.host_exists():
            try:
                host_object = self.zapi.host.getobjects(host=self.host)
            except ZabbixAPIException as e:
                self.module.fail_json(msg="unable to get host object: %s" % e)

            try:
                self.host_id = host_object[0]["hostid"]
                return True
            except IndexError:
                    self.module.fail_json(msg="Index error no such hostid :" + self.host)
        else:
            return False

    def get_groups(self):
        if not self.groups:
            return ""
        self.groups = str(self.groups).split(",")
        groups = []
        for group in self.groups:
            try:
                hostgroup_object = self.zapi.hostgroup.getobjects(name=group)
            except ZabbixAPIException as e:
                self.module.fail_json(msg="unable to get hostgroup object: %s" % e)
            try:
                groups.append({"groupid": hostgroup_object[0]["groupid"]})
            except IndexError:
                self.module.fail_json(msg="no such group defined :" + str(group))
        return groups

    def get_templates(self):
        if not self.templates:
            return ""

        self.templates = str(self.templates).split(",")
        templates = []
        for template in self.templates:
            try:
                template_object = self.zapi.template.getobjects(name=template)
            except ZabbixAPIException as e:
                self.module.fail_json(msg="unable to get template object: %s" % e)

            try:
                templates.append({"templateid": template_object[0]["templateid"]})
            except IndexError:
                self.module.fail_json(msg="no such template defined :" + str(template))
        return templates

    def host_exists(self):
        return self.zapi.host.exists(host=self.host)

    def construct_interface(self,interface_id=""):
        if self.i_dns and self.i_ip:
            self.module.fail_json(msg="Failed you have to select either DNS or IP")

        use_ip = 0 if self.i_dns else 1

        if interface_id:
            return [{"type":self.i_type, "main": self.i_main, "useip": use_ip, "ip": self.i_ip,
                     "dns": self.i_dns, "port": self.i_port, "interfaceid":interface_id}]
        else:
            return [{"type": self.i_type, "main": self.i_main, "useip": use_ip, "ip": self.i_ip,
                    "dns": self.i_dns, "port": self.i_port}]

    def host_create(self):
        try:
            if not self.get_host_id():
                ## Create 
                templates_id = self.get_templates()
                arg = {"host": self.host, "interfaces": self.construct_interface(), "groups": self.get_groups()}
                if templates_id:
                    arg["templates"] = templates_id

                if self.visible:
                    arg["name"] = self.visible

                return self.zapi.host.create(**arg) 
            else:
                ## Update
                self.get_host_object()
                updated_host = HostTemplate(host_id=self.host_id, visible=self.visible,
                                            groups=self.get_groups(), templates=self.get_templates(),
                                            interface=self.construct_interface(), status=self.status)

                diff = updated_host == self.current_host
                if updated_host == self.current_host:
                    #self.module.fail_json(msg=str(diff) + " ****** current=" + str(self.current_host.__dict__) + "  **** new=" + str(updated_host.__dict__))
                    return False
                else:
                    #self.module.fail_json(msg= str(diff) + " ****** current=" + str(self.current_host.__dict__) + "  **** new=" + str(updated_host.__dict__))
                    return self.host_update(updated_host)

        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to create host: %s" % e)
        ##return True

    def host_interface_update(self, updated_host):
        try:
            updated_host.interface = self.construct_interface(self.zapi.hostinterface.get(output="extend", hostids=updated_host.host_id)[0]["interfaceid"])
            self.zapi.hostinterface.update(updated_host.interface[0])
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to update interface: %s" % e)

    def host_update(self, updated_host):
        try:
            arg = {"hostid": updated_host.host_id, "status": updated_host.status}

            if updated_host.visible:
                arg["name"] = updated_host.visible

            if updated_host.templates:
                #TODO: need to clear and unlink
                arg["templates"] = updated_host.templates

            if updated_host.groups:
                arg["groups"] = updated_host.groups

            self.zapi.host.update(**arg)
            self.host_interface_update(updated_host)
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to update host: %s" % e)
        #return True

    def host_delete(self):
        try:
            if self.get_host_id():
                self.zapi.host.update(hostid=self.host_id,)
                return True
            else:
                return False
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to delete host: %s" % e)

    def main(self):
        try:
            self.zapi.login(self.login_user, self.login_password)
        except ConnectionError as e:
            self.module.fail_json(msg="unable to connect to zabbix server: %s" % e)

        if self.state == "absent":
            self.changed = self.host_delete()
        elif self.state == "present":
            self.changed = self.host_create()

        self.module.exit_json(changed=self.changed)


def main():
        module = AnsibleModule(
            argument_spec=dict(
                login_user=dict(default="Admin"),
                login_password=dict(default=""),
                login_reset=dict(default="no", choices=["yes", "no"]),
                login_url=dict(default=""),
                visible=dict(required=False),
                host=dict(required=True, aliases=['name']),
                groups=dict(required=False),
                templates=dict(required=False),
                state=dict(default="present", choices=["absent", "present"]),
                status=dict(default="monitored", choices=["monitored", "unmonitored", "yes", "no"]),
                i_dns=dict(default="", aliases=['dns']),
                i_ip=dict(default="",aliases=['ip']),
                i_port=dict(default="10050",aliases=['port']),
                i_main=dict(default=1,aliases=['main']),
                i_type=dict(default="agent", choices=["agent", "SNMP", "IPMI", "JMX"], aliases=['type']),
            ),
            #For now dont support check_mode
            supports_check_mode = False
        )
        ZabbixHosts(module).main()

main()
