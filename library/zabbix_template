#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
author: Adham Helal
'''

EXAMPLES = '''

'''


class zabbixTemplates():
    def __init__(self, module):
        self.module = module
        self.login_url = self.module.params["login_url"]
        self.template = self.module.params["template"]
        self.json = self.module.params["json"]
        self.id = False
        self.state = self.module.params["state"]
        self.changed = False
        self.login_user = module.params["login_user"]
        self.login_password = module.params["login_password"]
        self.zapi = False
        self.suggested_template_json = False
        self.actual_template_json = False
        self.msg = False

    def template_get_id(self):
        if not self.template:
            return False
        try:
            template_object = self.zapi.template.getobjects(host=self.template)
        except ZabbixAPIException as e:
            self.module.fail_json(msg="unable to get template object: %s" % e)

        try:
            self.id = template_object[0]["templateid"]
        except IndexError:
            self.msg = "no such template defined :" + str(self.template)
            return False

        return True

    def template_dump(self):
        if self.template_get_id():
            try:
                self.msg = self.zapi.configuration.export(format="json", options={"templates": [self.id]})
                return True
            except Exception, e:
                self.module.fail_json(msg="unable to export template: %s" % e)
        else:
            self.module.fail_json(msg=self.msg)

    def template_import(self):
        try:
            template_name = self.suggested_template_json["zabbix_export"]["templates"][0]["template"]
            if template_name != self.template:
                self.module.fail_json(msg="JSON template name does not match presented name")
        except Exception, e:
            self.module.fail_json(msg="Template JSON format is incompatible " % e)

        try:
            return self.zapi.confimport(format="json", source=self.json, rules={"items": {"createMissing": "true","updateExisting": "true"}, "templates": {"createMissing": "true","updateExisting": "true"} })
        except Exception, e:
            self.module.fail_json(msg="Unable to import JSON template %s" % e)

    def template_diff(self):
        if self.json == "":
                return False
        try:
            self.template_dump()
            self.actual_template_json = json.loads(self.msg)
            del self.actual_template_json["zabbix_export"]["date"]
        except Exception, e:
            self.module.fail_json(msg="unable to load JSON actual template: %s" % e)

        try:
            self.suggested_template_json = json.loads(self.json)
            del self.suggested_template_json["zabbix_export"]["date"]
        except Exception, e:
            self.module.fail_json(msg="unable to load JSON suggested template: %s" % e)

        self.msg = False
        if self.actual_template_json == self.suggested_template_json:
            ## No change needed
            return False
        else:
            print "Changed"
            ## Import json
            return self.template_import()

    def template_create(self):
        if self.template_get_id():
            return self.template_diff()
        else:
            ## Create a new template part of group id 1 "templates"
            try:
                if self.json == "":
                    return self.zapi.template.create(host=self.template, groups={"groupid": 1})
                else:
                    return self.zapi.template.create(host=self.template, groups={"groupid": 1}) and self.template_import()
            except Exception, e:
                self.module.fail_json(msg="unable to create template: %s" % e)

    def template_delete(self):
        if self.template_get_id():
            try:
                self.msg = self.zapi.template.delete(self.id)
                return True
            except Exception, e:
                self.module.fail_json(msg="unable to delete template: %s" % e)
        else:
            return False

    def main(self):
        self.zapi = ZabbixAPI(self.login_url)
        try:
            self.zapi.login(self.login_user, self.login_password)
        except ConnectionError as e:
            self.module.fail_json(msg="unable to connect to Zabbix server: %s" % e)

        if self.state == "absent":
            self.changed = self.template_delete()
        elif self.state == "present":
            self.changed = self.template_create()
        elif self.state == "dump":
            self.changed = self.template_dump()

        self.module.exit_json(changed=self.changed, msg=self.msg)


def main():
        module = AnsibleModule(
            argument_spec=dict(
                login_user=dict(default="Admin"),
                login_password=dict(default=""),
                login_url=dict(default=""),
                template=dict(required=True, aliases=['name']),
                json=dict(default=""),
                state=dict(default="present", choices=["absent", "present", "dump"]),
            ),
            #For now dont support check_mode
            supports_check_mode=False
        )

        zabbixTemplates(module).main()

from ansible.module_utils.basic import *
import json
main()